using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TheHunt.MediaR.SourceGen
{
    [Generator]
    public class HelloSourceGenerator : ISourceGenerator
    {
        public static string Template { get; } = $@"// ";

        public void Execute(GeneratorExecutionContext context)
        {
            if (context.SyntaxReceiver is not MySyntaxReceiver syntaxReceiver)
                return;

            var set = new HashSet<(string Namespace, string Request, string Result)>();
            foreach (var service in syntaxReceiver.Services)
            {
                foreach (var method in service.Members.Where(m => m is MethodDeclarationSyntax).Cast<MethodDeclarationSyntax>())
                {
                    // var requestType = method.ParameterList.Parameters[0].Type!.ToString();
                    // var resultType = ((GenericNameSyntax)((QualifiedNameSyntax)method.ReturnType).Right).TypeArgumentList.Arguments[0].ToString();
                    // var resultTaskType = method.ReturnType.ToString();

                    var requestType = (QualifiedNameSyntax)method.ParameterList.Parameters[0].Type!;
                    var requestNamespace = ((AliasQualifiedNameSyntax)requestType.Left).Name.ToString();
                    var requestClassType = requestType.Right.ToString();

                    var resultType = ((GenericNameSyntax)((QualifiedNameSyntax)method.ReturnType).Right).TypeArgumentList.Arguments[0].ToString();

                    set.Add((requestNamespace, requestClassType, resultType));
                }
            }

            foreach (var namespaceGroup in set.GroupBy(s => s.Namespace))
            {
                var sb = new StringBuilder();
                foreach (var (_, requestClass, resultType) in namespaceGroup)
                {
                    sb.Append(GetMethodInfo(requestClass, resultType));
                }

                var source = $@"// <auto-generated />
namespace {namespaceGroup.Key}
{{
{sb}
}}";

                context.AddSource($"{namespaceGroup.Key.Replace('.', '_')}.g.cs", source);
            }

//             foreach (var serviceClass in syntaxReceiver.Services)
//             {
//                 foreach (var member in serviceClass.Members)
//                 {
//                     if (member is MethodDeclarationSyntax method)
//                     {
//                         // method.ParameterList.Parameters[0].Identifier.Text
//                     }
//                 }
//             }
//
//             // Find the main method
//             var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken)!;
//             if (mainMethod == null)
//                 throw new Exception("TEee");
//
//             if (context.Compilation.AssemblyName == "TheHunt.Api")
//             {
//             }
//
//             // Build up the source code
//             var source = $@"// <auto-generated/>
// using System;
//
// namespace {mainMethod.ContainingNamespace.ToDisplayString()}
// {{
//     public static partial class {mainMethod.ContainingType.Name}
//     {{
//         static partial void HelloFrom(string name) =>
//             Console.WriteLine($""Generator says: Hi 2 from '{{name}}'"");
//     }}
// }}
// ";
//             var typeName = mainMethod.ContainingType.Name;
//
//             // Add the source code to the compilation
//             context.AddSource($"{typeName}.g.cs", source);
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new MySyntaxReceiver());
            SpinWait.SpinUntil(() => Debugger.IsAttached);
        }

        private string GetMethodInfo(string requestClassType, string resultType)
        {
            return $@"    public partial class {requestClassType} : MediatR.IRequest<{resultType}>
    {{
    }}
";
        }
    }


    public class MySyntaxReceiver : ISyntaxReceiver
    {
        public IList<ClassDeclarationSyntax> Services { get; } = new List<ClassDeclarationSyntax>();

        public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        {
            // if (syntaxNode is AttributeSyntax { Name: IdentifierNameSyntax { Identifier: { Text: "MediatorService" } } })
            // {
            //     Services.Add((ClassDeclarationSyntax)syntaxNode.Parent!.Parent);
            // }

            if (syntaxNode is not AliasQualifiedNameSyntax { Alias.Identifier.Text: "grpc", Name.Identifier.Text: "BindServiceMethod" }) return;

            var parent = syntaxNode.Parent;
            while (parent is not ClassDeclarationSyntax and not null)
            {
                parent = parent.Parent;
            }

            if (parent != null)
                Services.Add((ClassDeclarationSyntax)parent);

            // if (syntaxNode is ClassDeclarationSyntax
            //     {
            //         AttributeLists: [
            //         {
            //             Attributes: [
            //             {
            //                 Name: AliasQualifiedNameSyntax
            //                 {
            //                     Alias.Identifier.Text: "grpc",
            //                     Name.Identifier.Text: "BindServiceMethod"
            //                 }
            //             }]
            //         }]
            //     } classDeclarationSyntax)
            // {
            //     Services.Add(classDeclarationSyntax);
            // }
        }
    }
}