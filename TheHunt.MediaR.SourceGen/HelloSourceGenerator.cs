using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TheHunt.MediaR.SourceGen
{
    [Generator]
    public class HelloSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            if (context.SyntaxReceiver is not MySyntaxReceiver syntaxReceiver)
                return;

            foreach (var serviceClass in syntaxReceiver.Services)
            {
                foreach (var member in serviceClass.Members)
                {
                    if (member is MethodDeclarationSyntax method)
                    {
                        // method.ParameterList.Parameters[0].Identifier.Text
                    }
                }
            }

            // Find the main method
            var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken)!;
            if (mainMethod == null)
                throw new Exception("TEee");

            if (context.Compilation.AssemblyName == "TheHunt.Api")
            {
            }

            // Build up the source code
            var source = $@"// <auto-generated/>
using System;

namespace {mainMethod.ContainingNamespace.ToDisplayString()}
{{
    public static partial class {mainMethod.ContainingType.Name}
    {{
        static partial void HelloFrom(string name) =>
            Console.WriteLine($""Generator says: Hi 2 from '{{name}}'"");
    }}
}}
";
            var typeName = mainMethod.ContainingType.Name;

            // Add the source code to the compilation
            context.AddSource($"{typeName}.g.cs", source);
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new MySyntaxReceiver());
        }
    }

    public class MySyntaxReceiver : ISyntaxReceiver
    {
        public IList<ClassDeclarationSyntax> Services { get; } = new List<ClassDeclarationSyntax>();

        public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        {
            if (syntaxNode is AttributeSyntax { Name: IdentifierNameSyntax { Identifier: { Text: "MediatorService" } } })
            {
                Services.Add((ClassDeclarationSyntax)syntaxNode.Parent!.Parent);
            }
        }
    }
}